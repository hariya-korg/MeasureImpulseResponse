<!DOCTYPE HTML>
<html>

<head>
    <meta charset='utf-8'></meta>
    <title>Measure Impulse Response</title>
    <link type='text/css' rel='stylesheet' href='style.css'></link>
    <script type='text/javascript' src='compatibility.js'></script>
    <script type='text/javascript' src='fft.js'></script>
    <script type='text/javascript' src='pinktsp.js'></script>
    <script type='text/javascript' src='extendedDataView.js'></script>
    <script type='text/javascript'>
        (function(){
            /* global variables */
            var audioCtx = new AudioContext();
            var sampleRate = audioCtx.sampleRate;
            var latency = 4096;
            var status, measure, calib;
            var linear, full;

            var revlevel = audioCtx.createGain();
            revlevel.gain.value = 0.5;
            revlevel.connect(audioCtx.destination);

            var convolver = audioCtx.createConvolver();
            convolver.connect(revlevel);

            function createAudioBuffer(array) {
                var channels = 2;
                var length = array.length;
                var buffer = audioCtx.createBuffer(channels, length, audioCtx.sampleRate);
                for (var channel = (channels - 1)|0; (channel|0) >= (0|0); channel = (channel - 1)|0) {
                    var data = buffer.getChannelData(channel);
                    for (var index = (length - 1)|0; (index|0) >= (0|0); index = (index - 1)|0) {
                        data[index<<1>>1] = array[index<<1>>1];
                    }
                }
                return buffer;
            }

            function loadAudioFile(url, onload, audio_ctx) {
                /* load buffer asynchronously */
                var request = new XMLHttpRequest();
                request.open('GET', url, true);
                request.responseType = 'arraybuffer';

                request.onload = function() {
                    /* decode audio data asynchronously in request.response */
                    audio_ctx.decodeAudioData(
                        request.response,
                        function(buffer) {
                            if (!buffer) {
                                alert('error in decoding audio data : ' + url);
                                return;
                            }
                            onload(buffer);
                        },
                        function(error) {
                            console.error('error in decodeAudioData (loadAudioFile)', error);
                        }
                    );
                }

                request.onerror = function(error) {
                    alert('error in loadAudioFile', error);
                }

                request.send();
            }

            function onDOMContentLoaded() {
                status = document.getElementById('status');
                measure = document.getElementById('measure');
                calib = document.getElementById('calib');

                status.innerHTML = 'Initialized';
                measure.innerHTML = 'Start';
                measure.value = false;
                measure.addEventListener('click', function(event) {
                    var value = this.value == 'false';
                    if (value) {
                        onStartMeasure();
                    } else {
                        onStopMeasure();
                    }
                    this.value = value;
                }, false);

                calib.innerHTML = 'Calib';
                calib.value = false;
                calib.addEventListener('click', function(event) {
                    var value2 = this.value == 'false';
                    if (value2) {
                        onStartCalib();
                    } else {
                        onStopCalib();
                    }
                    this.value = value2;
                }, false);

                document.getElementById('second').addEventListener('change', function(event) {
                    if (parseFloat(this.value) < 0.1) {
                        this.value = 0.1;
                    }
                }, false);

                document.getElementById('times').addEventListener('change', function(event) {
                    if (parseInt(this.value) < 1) {
                        this.value = 1;
                    }
                }, false);

                document.getElementById('linearIR').addEventListener('click', function(event) {
                    downloadWavFromData([linear], sampleRate, 'linear.wav');
                }, false);

                document.getElementById('fullIR').addEventListener('click', function(event) {
                    downloadWavFromData([full], sampleRate, 'full.wav');
                }, false);

                document.getElementById('playIR').addEventListener('click', function(event) {
                    var source = audioCtx.createBufferSource();
                    source.buffer = createAudioBuffer(linear);
                    source.connect(audioCtx.destination);
                    source.start();
                }, false);

                document.getElementById('playShot').addEventListener('click', function(event) {
                    var source = audioCtx.createBufferSource();
                    source.connect(convolver);
                    loadAudioFile(document.getElementById('select').value, function(buffer) {
                        source.buffer = buffer;
                        source.start();
                        source = null;
                    }, audioCtx);
                }, false);

                document.getElementById('revlevel').addEventListener('change', function(event) {
                    var level = parseInt(this.value);
                    revlevel.gain.value = level * 0.01;
                    document.getElementById('revdisp').innerHTML = level;
                }, false);

                document.getElementById('reverb').style.display = 'none';
            }

            var tsp;
            function onStartCalib(){
                calib.innerHTML =  'StopSine'
                tsp = audioCtx.createBufferSource();
                tsp.loop = true;
                tsp.connect(audioCtx.destination);
                loadAudioFile('sound/tsp.wav', function(buffer){
                    tsp.buffer = buffer;
                    tsp.start();
                }, audioCtx);

                navigator.getUserMedia ({audio: {
                    "mandatory": {
                        "googEchoCancellation": false,
                        "googAutoGainControl": false,
                        "googNoiseSuppression": false,
                        "googHighpassFilter": false
                    },
                    "optional": []
                }}, function(stream) {
                    var source = audioCtx.createMediaStreamSource(stream);
                    var inputmax=0;
                    var inputmin=0;
                    scriptNode = audioCtx.createScriptProcessor(latency);
                    scriptNode.onaudioprocess = function(audioProcessingEvent) {
                        // The input buffer is the song we loaded earlier
                        var inputBuffer = audioProcessingEvent.inputBuffer;
                        for (var channel = 0; channel < inputBuffer.numberOfChannels; channel++) {
                            var inputData = inputBuffer.getChannelData(channel);
                            var inputmax = Math.max.apply(null, inputData);
                            var inputmin = Math.abs(Math.min.apply(null, inputData));
                            if (inputmax < inputmin){
                                    inputmax = inputmin ;
                            }
                        }
                        var maxdb = 20 * Math.log10(inputmax);
                        if (maxdb > -6.0) {
                            status.innerHTML    = 'too large '+ Math.floor(maxdb) +'dB';
                            status.style.color  = 'red';
                        } else if (maxdb < -20.0) {
                            status.innerHTML    = 'too small '+ Math.floor(maxdb) +'dB';
                            status.style.color  = 'black';
                        } else {
                            status.innerHTML    = 'proper '+ Math.floor(maxdb) +'dB';
                            status.style.color  = 'green';
                        }
                    }
                    source.connect(scriptNode);
                    scriptNode.connect(audioCtx.destination);
                },function(err){ alert("miss") });
            }

            function onStopCalib(){
                status.innerHTML = 'Initialized';
                status.style.color = "black";
                calib.innerHTML =  'Calib'
                scriptNode.disconnect();
                tsp.stop();
                tsp = null;
            }

            /* meareu impulse response */
            var source, processor;
            function onStartMeasure() {
                navigator.getUserMedia ({audio: {
                    'mandatory' : {
                        'googEchoCancellation'  : false,
                        'googAutoGainControl'   : false,
                        'googNoiseSuppression'  : false,
                        'googHighpassFilter'    : false
                    },
                    'optional': []
                }}, function(stream) {
                    /* change status */
                    status.innerHTML = 'Measuring...';
                    measure.innerHTML = 'Stop';
                    document.getElementById('reverb').style.display = 'none';

                    /* calculate property of signal */
                    var second = parseFloat(document.getElementById('second').value);
                    var length = roundPower2(sampleRate * second * 2.0);
                    var ratio = 1.0;
                    var channel = 1|0;
                    var times = parseInt(document.getElementById('times').value)|0;
                    var offset = (5000 + parseInt(document.getElementById('offset').value))|0;

                    source = audioCtx.createMediaStreamSource(stream);
                    processor = audioCtx.createScriptProcessor(latency|0, channel|0, 1|0);

                    var pinktsp = createPinkTsp(length<<1>>1, ratio);
                    var modified = new Float32Array((length + latency)|0);
                    for (var index = (length - 1)|0; (index|0) >= (0|0); index = (index - 1)|0) {
                        modified[index<<1>>1] = pinktsp[index<<1>>1];
                    }
                    for (var index = (latency - 1)|0; (index|0) >= (0|0); index = (index - 1)|0) {
                        modified[index<<1>>1] = pinktsp[(index + length)<<1>>1];
                    }
                    modified.position = 0|0;
                    modified.shift = ((pinktsp.shift + offset) % length)|0;
                    modified.a = pinktsp.a;
                    processor.pinktsp = modified;

                    var response = new Float32Array(length|0);
                    response.position = -offset|0;
                    response.times = times|0;
                    response.take = -1|0;
                    processor.response = response;

                    processor.onaudioprocess = function(event) {
                        /* set output data */
                        var data = event.outputBuffer.getChannelData(0|0);
                        var latency = data.length|0;

                        var pinktsp = this.pinktsp;
                        var length = (pinktsp.length - latency)|0;
                        var position = pinktsp.position|0;

                        for (var index = ((latency - 1)|0); (index|0) >= (0|0); index = (index - 1)|0) {
                            data[index<<1>>1] = pinktsp[(position + index)|0];
                        }
                        pinktsp.position = ((position + latency) % length)|0;
                        pinktsp = null;

                        /* record input */
                        data = event.inputBuffer.getChannelData(0<<1>>1);
                        var response = this.response;
                        position = response.position|0;
                        var ppl = (position + latency)|0;
                        var take = response.take|0;
                        var tempi, tempv;
                        if ((ppl|0) >= (length|0)) {
                            var head = (ppl % length)|0;
                            var tail = (latency - head)|0;
                            take = (take + 1)|0;
                            if ((take|0) === (0|0)) {
                                for (var index = -head|0; (index|0) < (0|0); index = (index + 1)|0) {
                                    tempi = (head + index)|0;
                                    tempv = response[tempi<<1>>1] + data[(latency + index)|0];
                                    response[tempi<<1>>1] = tempv;
                                }
                            } else if ((take|0) === (response.times|0)) {
                                for (var index = (tail - 1)|0; (index|0) >= (0|0); index = (index - 1)|0) {
                                    tempi = (position + index)|0;
                                    tempv = response[tempi<<1>>1] + data[index<<1>>1];
                                    response[tempi<<1>>1] = tempv;
                                }
                                setTimeout(onFinishMeasure, 0);
                            } else if ((take|0) > (0|0)) {
                                for (var index = -head|0; (index|0) < (0|0); index = (index + 1)|0) {
                                    tempi = (head + index)|0;
                                    tempv = response[tempi<<1>>1] + data[(latency + index)|0];
                                    response[tempi<<1>>1] = tempv;
                                }
                                for (var index = (tail - 1)|0; (index|0) >= (0|0); index = (index - 1)|0) {
                                    tempi = (position + index)|0;
                                    tempv = response[tempi<<1>>1] + data[index<<1>>1];
                                    response[tempi<<1>>1] = tempv;
                                }
                            }
                            ppl = head|0;
                            response.take = take|0;

                            tail = null;
                            head = null;
                        } else if (((take|0) >= (0|0)) && ((take|0) < (response.times|0))) {
                            for (var index = (latency - 1)|0; (index|0) >= (0|0); index = (index - 1)|0) {
                                tempi = (position + index)|0;
                                tempv = response[tempi<<1>>1] + data[index<<1>>1];
                                response[tempi<<1>>1] = tempv;
                            }
                        }
                        response.position = ppl|0;

                        data = null;
                        latency = null;
                        length = null;
                        position = null;

                        response = null;
                        ppl = null;
                        take = null;
                        tempi = null;
                        tempv = null;
                    }

                    source.connect(processor);
                    processor.connect(audioCtx.destination);

                    pinktsp = null;
                    modified = null;
                    response = null;
                }, alert);
            };

            function onStopMeasure() {
                clearAudio();
                status.innerHTML = 'Interrupted';
                measure.innerHTML = 'Start';
            }

            function onFinishMeasure() {
                var modified = processor.pinktsp;
                var response = processor.response;
                var pinktsp = new Float32Array(response.length|0);
                pinktsp.shift = modified.shift;
                pinktsp.a = modified.a;

                clearAudio();
                status.innerHTML = 'Finished';
                measure.innerHTML = 'Start';
                measure.value = false;

                full = computeImpulseResponseFromPinkTsp(pinktsp, response);
                linear = new Float32Array(full.length >> 1);
                for (var index = (linear.length - 1); (index|0) >= (0|0); index = (index - 1)|0) {
                    linear[index<<1>>1] = full[index<<1>>1];
                }
                convolver.buffer = createAudioBuffer(linear);
                drawGraph(full);
                document.getElementById('reverb').style.display = 'block';

                modified = null;
                response = null;
                pinktsp = null;
            }

            function clearAudio() {
                source.disconnect();
                source = null;

                processor.disconnect();
                processor.pinktsp = null;
                processor.response = null;
                processor = null;
            }

            /* utilities */
            function roundPower2(value) {
                var v = parseInt(Math.round(value));
                value = 1|0;
                while (v) {
                    v = v >> 1;
                    value = value << 1;
                }
                return value;
            }

            function downloadWavFromData(data, sampleRate, filename) {
                /* data is a 2-dimensional array and should have values between -1.0 and 1.0. */

                /* preprocess */
                if (!filename) {
                    filename = 'JavaScript.wav';
                }
                sampleRate = parseInt(sampleRate);
                var channel = data.length|0;
                var length = data[0<<1>>1].length|0;

                /* create interleaved data */
                var id = new Float32Array((channel * length)|0);    /* interleaved data */
                var cd;                                             /* channel data */
                for (var c = (channel - 1)|0; (c|0) >= (0|0); c = (c - 1)|0) {
                    cd = data[c<<1>>1];
                    for (var l = (length - 1)|0; (l|0) >= (0|0); l = (l - 1)|0) {
                        id[(channel * l + c)|0] = cd[l<<1>>1];
                    }
                }

                /* create binary data */
                var format = 1|0;   /* linear PCM */
                var bit = 16|0;     /* This should be altered later. */
                var block = ((bit >> 3) * channel)|0;
                var size = (44 + length * block)|0;
                var buffer = new ArrayBuffer(size<<1>>1);
                var view = new ExtendedDataView(buffer);

                view.setString( 0|0, 'RIFF');
                view.setUint32( 4|0, (size - 8)|0, true);
                view.setString( 8|0, 'WAVE');
                view.setString(12|0, 'fmt ');
                view.setUint32(16|0, 16|0, true);
                view.setUint16(20|0, format|0, true);
                view.setUint16(22|0, channel|0, true);
                view.setUint32(24|0, sampleRate|0, true);
                view.setUint32(28|0, (sampleRate * block)|0, true);
                view.setUint16(32|0, block|0, true);
                view.setUint16(34|0, bit|0, true);
                view.setString(36|0, 'data');
                view.setUint32(40|0, (size - 44)|0, true);
                view.setFloat32ArrayAsInt16(44|0, id, true);

                /* download the binary data */
                var blob = new Blob([view], {type:'audio/wav'});
                var a = document.createElement('a');
                a.href = window.URL.createObjectURL(blob);
                a.download = filename;
                a.click();

                channel = null;
                length = null;
                id = null;
                cd = null;

                format = null;
                bit = null;
                block = null;
                size = null;
                buffer = null;
                view = null;

                blob = null;
                a = null;
            };

            function drawGraph(array) {
                var width = window.innerWidth * 0.8;
                var height = window.innerHeight * 0.8;
                var center = height * 0.4;
                var canvas = document.getElementById('graph');
                canvas.setAttribute('width', width);
                canvas.setAttribute('height', height);
                var length = array.length;
                var unit = width / (length - 1.0);
                var canvasCtx = canvas.getContext('2d');
                canvasCtx.clearRect(0.0, 0.0, width, height);
                canvasCtx.strokeStyle = 'rgb(0, 0, 0)';
                canvasCtx.lineWidth	= 1;
                canvasCtx.lineJoin	= 'round';
                canvasCtx.beginPath();
                canvasCtx.moveTo(width, center * (1.0 - array[(length - 1)|0]));
                for (var index = (length - 2)|0; index >=0; index = (index - 1)|0) {
                    canvasCtx.lineTo(unit * index, center * (1.0 - array[index<<1>>1]));
                }
                canvasCtx.stroke();
                canvasCtx.strokeStyle = 'rgb(0, 0, 255)';
                canvasCtx.lineWidth	= 1;
                canvasCtx.lineJoin	= 'round';
                canvasCtx.beginPath();
                canvasCtx.moveTo(width, center);
                canvasCtx.lineTo(0, center);
                canvasCtx.stroke();

                strokeDottedLine(width/2,0,0,0);
                strokeDottedLine(0,0,0,center*2);
                strokeDottedLine(0,center*2,width/2,center*2);
                strokeDottedLine(width/2,center*2,width/2, 0);

                function strokeDottedLine(p1x, p1y, p2x, p2y) {
                    var d = Math.sqrt(Math.pow(p2x - p1x, 2) + Math.pow(p2y - p1y, 2));
                    var rad = Math.atan2(p2y - p1y, p2x - p1x);
                    var space = 5;
                    var dotted = Math.round(d / space / 2);

                    for (var i = 0; i < dotted; i++) {
                        var p3x = Math.cos(rad) * space * (i * 2) + p1x;
                        var p3y = Math.sin(rad) * space * (i * 2) + p1y;
                        var p4x = Math.cos(rad) * space * (i * 2 + 1) + p1x;
                        var p4y = Math.sin(rad) * space * (i * 2 + 1) + p1y;

                        canvasCtx.strokeStyle = 'rgb(255, 0, 0)';
                        canvasCtx.lineWidth	= 1;
                        canvasCtx.lineJoin	= 'round';
                        canvasCtx.beginPath();
                        canvasCtx.moveTo(p3x, p3y);
                        canvasCtx.lineTo(p4x, p4y);
                        canvasCtx.stroke();
                    }
                };
            }

            window.addEventListener('DOMContentLoaded', onDOMContentLoaded, false);
        })();
    </script>
</head>

<body>
    <p id='status'></p>
    <table border="1" width="600" align="center">
        <tbody>
            <tr>
                <td>Calibration</td>
                <td>empty</td>
                <td><button id='calib'></button></td>
            </tr>
            <tr>
                <td>IR Length [sec]</td>
                <td><input type='text' id='second' size='1' value='1.0'></input></td>
                <td rowspan='3'><button id='measure' style="WIDTH: 100px; HEIGHT: 50px"></button></td>
            </tr>
            <tr>
                <td>Synchronous Addition [times]</td>
                <td><input type='text' id='times' size ='1' value='1'></input></td>
            </tr>
            <tr>
                <td>Time Offset [samples]</td>
                <td><input type='text' id='offset' size='1' value='0'></input></td>
            </tr>
        </tbody>
    </table>
    <div id='reverb'>
        <p>
            <button id='linearIR'>Download Linear IR</button>
            <button id='fullIR'>Download Full IR</button>
            <button id='playIR'>Play IR</button>
            <button id="playShot">Play One Shot</button>
            <select id='select'>
                <option value='sound/clap.wav'>Clap</option>
                <option value='sound/guitar.wav'>Guitar</option>
            </select>
        </p>
        <form name="form_conv" id="form_conv" action="">
            <span>ReverbLevel :</span>
            <input type="range" id="revlevel" min="0" max="100" value="50" />
            <span id="revdisp">50</span>
        </form>
    </div>
    <p><canvas id='graph'></canvas></p>
</body>
</html>
